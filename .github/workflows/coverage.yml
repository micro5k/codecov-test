---
# SPDX-FileCopyrightText: (c) 2021 ale5000
# SPDX-License-Identifier: GPL-3.0-or-later

name: "Coverage"
permissions: {}
on:
  push:
  pull_request:
  workflow_dispatch:
jobs:
  base-job:
    name: "Base"
    runs-on: ubuntu-latest
    concurrency:
      group: "${{ github.repository_id }}-${{ github.workflow }}-base"
      cancel-in-progress: false

    steps:
      - name: "Checkout sources"
        uses: actions/checkout@v4
      - name: "Setup Java"
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "17"
      - name: "Setup Ruby"
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.4"
      - name: "Install Bashcov and simplecov-lcov"
        run: |
          # Installing Bashcov and simplecov-lcov...
          gem install bashcov:3.1.3 simplecov-lcov
      - name: "Build (with coverage)"
        id: "build"
        shell: bash
        run: |
          # Executing code coverage...
          export BUILD_TYPE=oss
          #sudo apt-get -qq -y install moreutils 1>/dev/null
          bashcov '${{ github.workspace }}/build.sh' # To timestamp the output pipe it to: TZ=UTC ts '[%H:%M:%S]'
      - name: "Testing (with coverage)"
        shell: bash
        if: "${{ steps.build.outputs.ZIP_BUILD_TYPE_SUPPORTED == 'true' }}"
        run: |
          # Testing of zip installation...
          echo '==========================='
          echo 'TESTING OF ZIP INSTALLATION'
          echo '==========================='
          bashcov '${{ github.workspace }}/recovery-simulator/recovery.sh' '${{ steps.build.outputs.ZIP_FOLDER }}/${{ steps.build.outputs.ZIP_FILENAME }}'
          printf '\n'
          echo '==============='
          echo 'RECOVERY OUTPUT'
          echo '==============='
          if test -e '${{ github.workspace }}/recovery-simulator/output/recovery-output.log'; then
            cat '${{ github.workspace }}/recovery-simulator/output/recovery-output.log'
          fi
          printf '\n'
          echo '==============='
          echo 'INSTALLED FILES'
          echo '==============='
          if test -e '${{ github.workspace }}/recovery-simulator/output/installed-files.log'; then
            cat '${{ github.workspace }}/recovery-simulator/output/installed-files.log'
          fi
      - name: "Verify Codecov token"
        id: "codecov-token"
        shell: bash
        run: |
          # Verifying token...
          token_set='true'
          test -n '${{ secrets.CODECOV_TOKEN }}' || token_set='false'
          printf 'TOKEN_SET=%s\n' "${token_set:?}" 1>> "${GITHUB_OUTPUT?}"
      - name: "Upload coverage reports to Codecov"
        if: "${{ steps.codecov-token.outputs.TOKEN_SET == 'true' && github.ref == 'refs/heads/main' && github.event_name != 'pull_request' }}"
        uses: codecov/codecov-action@v5
        with:
          fail_ci_if_error: true
          token: "${{ secrets.CODECOV_TOKEN }}"
      - name: "Verify Codacy token"
        id: "codacy-token"
        shell: bash
        run: |
          # Verifying token...
          token_set='true'
          test -n '${{ secrets.CODACY_PROJECT_TOKEN }}' || token_set='false'
          printf 'TOKEN_SET=%s\n' "${token_set:?}" 1>> "${GITHUB_OUTPUT?}"
      - name: "Upload coverage reports to Codacy"
        if: "${{ steps.codacy-token.outputs.TOKEN_SET == 'true' && github.ref == 'refs/heads/main' && github.event_name != 'pull_request' }}"
        uses: codacy/codacy-coverage-reporter-action@v1
        with:
          project-token: "${{ secrets.CODACY_PROJECT_TOKEN }}"
